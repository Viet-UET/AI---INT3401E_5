# main.py (ƒê√£ ch·ªânh s·ª≠a)
# -*- coding: utf-8 -*-
import sys
import os
import logging
import coloredlogs
import argparse  # <<< TH√äM IMPORT N√ÄY

from Coach import Coach
# Kh√¥ng import Game v√† NNet c·ªë ƒë·ªãnh ·ªü ƒë√¢y n·ªØa
# from othello.OthelloGame import OthelloGame as Game
# from othello.pytorch.NNet import NNetWrapper as nn
from utils import * # Gi·∫£ s·ª≠ dotdict ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong utils

log = logging.getLogger(__name__)

coloredlogs.install(level='INFO')  # ƒê·ªïi th√†nh DEBUG ƒë·ªÉ xem nhi·ªÅu th√¥ng tin h∆°n.

# --- C√°c tham s·ªë m·∫∑c ƒë·ªãnh ---
# S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t/ghi ƒë√® b·ªüi c√°c tham s·ªë d√≤ng l·ªánh qua argparse
DEFAULT_ARGS = dotdict({
    'numIters': 1000,
    'numEps': 100,
    'tempThreshold': 15,
    'updateThreshold': 0.6,
    'maxlenOfQueue': 200000,
    'numMCTSSims': 25,
    'arenaCompare': 40,
    'cpuct': 1,

    'checkpoint': './temp/',
    'load_model': False,
    'load_folder': '/dev/models/8x100x50', # ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c m·∫´u
    'load_file': 'best.pth.tar',          # T√™n file m·∫´u

    'numItersForTrainExamplesHistory': 20,

    # Th√™m c√°c tham s·ªë c√≥ th·ªÉ mu·ªën ƒëi·ªÅu ch·ªânh t·ª´ d√≤ng l·ªánh
    'lr': 0.001,
    'dropout': 0.3,
    'epochs': 10,
    'batch_size': 64,
    'cuda': torch.cuda.is_available() if 'torch' in sys.modules else False, # Ki·ªÉm tra n·∫øu torch ƒë√£ import
    'num_channels': 128, # N√™n kh·ªõp v·ªõi NNet.py ho·∫∑c cho ph√©p override
    'num_res_blocks': 10 # N√™n kh·ªõp v·ªõi NNet.py ho·∫∑c cho ph√©p override
})

def main():
    # --- X·ª≠ l√Ω tham s·ªë d√≤ng l·ªánh ---
    parser = argparse.ArgumentParser(description='AlphaZero Main Trainer')
    # Th√™m c√°c argument, gi√° tr·ªã default l·∫•y t·ª´ DEFAULT_ARGS
    parser.add_argument('--game', '-g', type=str, default=DEFAULT_ARGS.game if 'game' in DEFAULT_ARGS else 'othello', help='T√™n game (othello, tictactoe, chess, ...)')
    parser.add_argument('--numIters', '-i', type=int, default=DEFAULT_ARGS.numIters, help='S·ªë v√≤ng l·∫∑p hu·∫•n luy·ªán (iterations)')
    parser.add_argument('--numEps', '-e', type=int, default=DEFAULT_ARGS.numEps, help='S·ªë v√°n self-play m·ªói v√≤ng l·∫∑p')
    parser.add_argument('--tempThreshold', '-t', type=int, default=DEFAULT_ARGS.tempThreshold, help='Ng∆∞·ª°ng temp=0 cho MCTS')
    parser.add_argument('--updateThreshold', '-u', type=float, default=DEFAULT_ARGS.updateThreshold, help='Ng∆∞·ª°ng ch·∫•p nh·∫≠n model m·ªõi qua Arena')
    parser.add_argument('--maxlenOfQueue', '-q', type=int, default=DEFAULT_ARGS.maxlenOfQueue, help='ƒê·ªô d√†i t·ªëi ƒëa h√†ng ƒë·ª£i d·ªØ li·ªáu hu·∫•n luy·ªán')
    parser.add_argument('--numMCTSSims', '-m', type=int, default=DEFAULT_ARGS.numMCTSSims, help='S·ªë m√¥ ph·ªèng MCTS m·ªói n∆∞·ªõc ƒëi')
    parser.add_argument('--arenaCompare', '-a', type=int, default=DEFAULT_ARGS.arenaCompare, help='S·ªë v√°n ƒë·∫•u Arena')
    parser.add_argument('--cpuct', '-c', type=float, default=DEFAULT_ARGS.cpuct, help='H·∫±ng s·ªë ŒµŒæŒµœÅŒµœçŒΩŒ∑œÉŒ∑ MCTS')
    parser.add_argument('--checkpoint', '-p', type=str, default=DEFAULT_ARGS.checkpoint, help='Th∆∞ m·ª•c l∆∞u checkpoint')
    parser.add_argument('--load_model', action='store_true', help='C√≥ load model ƒë√£ l∆∞u kh√¥ng?')
    parser.add_argument('--load_folder', type=str, default=DEFAULT_ARGS.load_folder, help='Th∆∞ m·ª•c ch·ª©a model ƒë·ªÉ load')
    parser.add_argument('--load_file', type=str, default=DEFAULT_ARGS.load_file, help='T√™n file model ƒë·ªÉ load')
    parser.add_argument('--numItersForTrainExamplesHistory', type=int, default=DEFAULT_ARGS.numItersForTrainExamplesHistory, help='S·ªë v√≤ng l·∫∑p gi·ªØ l·∫°i d·ªØ li·ªáu hu·∫•n luy·ªán')
    # Th√™m c√°c args kh√°c n·∫øu c·∫ßn (v√≠ d·ª•: lr, dropout, epochs, batch_size...)
    parser.add_argument('--lr', type=float, default=DEFAULT_ARGS.lr, help='T·ªëc ƒë·ªô h·ªçc')
    parser.add_argument('--dropout', type=float, default=DEFAULT_ARGS.dropout, help='T·ª∑ l·ªá dropout')
    parser.add_argument('--epochs', type=int, default=DEFAULT_ARGS.epochs, help='S·ªë epochs hu·∫•n luy·ªán NNet m·ªói v√≤ng l·∫∑p')
    parser.add_argument('--batch_size', type=int, default=DEFAULT_ARGS.batch_size, help='K√≠ch th∆∞·ªõc batch hu·∫•n luy·ªán NNet')
    parser.add_argument('--num_channels', type=int, default=DEFAULT_ARGS.num_channels, help='S·ªë k√™nh Conv trong NNet')
    parser.add_argument('--num_res_blocks', type=int, default=DEFAULT_ARGS.num_res_blocks, help='S·ªë ResBlocks trong NNet')

    # Parse c√°c tham s·ªë t·ª´ d√≤ng l·ªánh
    args_parsed = parser.parse_args()

    # T·∫°o ƒë·ªëi t∆∞·ª£ng args cu·ªëi c√πng (k·∫øt h·ª£p default v√† parsed)
    # D√πng dotdict ƒë·ªÉ truy c·∫≠p b·∫±ng d·∫•u ch·∫•m (args.numIters)
    args = dotdict({**DEFAULT_ARGS, **vars(args_parsed)})
    # C·∫≠p nh·∫≠t l·∫°i tuple load_folder_file t·ª´ c√°c args ƒë√£ parse
    args.load_folder_file = (args.load_folder, args.load_file)
    # C·∫≠p nh·∫≠t cuda status sau khi args c√≥ th·ªÉ ƒë√£ thay ƒë·ªïi
    args.cuda = torch.cuda.is_available() if 'torch' in sys.modules else False

    # --- Import v√† Kh·ªüi t·∫°o Game, NNet ƒë·ªông ---
    log.info(f"Loading game '{args.game}'...")
    if args.game == 'othello':
        from othello.OthelloGame import OthelloGame as Game
        # Gi·∫£ s·ª≠ d√πng pytorch backend cho Othello
        from othello.pytorch.NNet import NNetWrapper as nn
        g = Game(6) # Othello c·∫ßn k√≠ch th∆∞·ªõc b√†n c·ªù
    elif args.game == 'chess':
        # <<< Ph·∫ßn d√†nh cho Chess >>>
        from chess_game.ChessGame import ChessGame as Game         # Import l·ªõp Game c·ªßa b·∫°n
        from chess_game.pytorch.NNet import NNetWrapper as nn # Import l·ªõp NNetWrapper c·ªßa b·∫°n
        g = Game()                                           # Kh·ªüi t·∫°o ChessGame (kh√¥ng c·∫ßn tham s·ªë)
    else:
         raise ValueError(f"Invalid game specified: {args.game}")

    log.info('Loading %s...', nn.__name__)
    # Kh·ªüi t·∫°o NNetWrapper, truy·ªÅn v√†o game 'g' v√† c√°c tham s·ªë 'args'
    # *** ƒê·∫£m b·∫£o NNetWrapper.__init__ trong NNet.py nh·∫≠n tham s·ªë args ***
    nnet = nn(g, args) # <<< TRUY·ªÄN args V√ÄO NNetWrapper

    # --- Ph·∫ßn c√≤n l·∫°i gi·ªØ nguy√™n ---
    if args.load_model:
        log.info('Loading checkpoint "%s/%s"...', args.load_folder_file[0], args.load_folder_file[1])
        try:
            nnet.load_checkpoint(args.load_folder_file[0], args.load_folder_file[1])
        except FileNotFoundError:
            log.error(f"Checkpoint kh√¥ng t√¨m th·∫•y t·∫°i '{os.path.join(args.load_folder_file[0], args.load_folder_file[1])}'. B·∫Øt ƒë·∫ßu m√† kh√¥ng load model.")
            args.load_model = False # Kh√¥ng th·ª≠ load examples n·∫øu model kh√¥ng load ƒë∆∞·ª£c
    else:
        log.warning('Not loading a checkpoint!')

    log.info('Loading the Coach...')
    # Truy·ªÅn c√°c tham s·ªë ƒë√£ c·∫≠p nh·∫≠t v√†o Coach
    c = Coach(g, nnet, args)

    if args.load_model: # Ch·ªâ load examples n·∫øu model ƒë√£ ƒë∆∞·ª£c load
        log.info("Loading 'trainExamples' from file...")
        c.loadTrainExamples()

    log.info('Starting the learning process üéâ')
    c.learn()


if __name__ == "__main__":
    # Import torch ·ªü ƒë√¢y ƒë·ªÉ ki·ªÉm tra cuda s·ªõm h∆°n n·∫øu c·∫ßn
    # Ho·∫∑c ƒë·ªÉ ki·ªÉm tra cuda trong h√†m main
    try:
        import torch
    except ImportError:
        print("PyTorch not found. Please install PyTorch.")
        sys.exit(1)

    main()